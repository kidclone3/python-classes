list1 <- list(
a = c(1,2,3)
)
matrix1 <- matrix(data = c(1,2,3,4,5,6), ncol=3)
View(matrix1)
x <- 1:9
dbinom(10, size=50, prob=0.25)
x = 0:50
p = dbinom(x, 50, 0.25)
sum(x*p)
# Chỉ số IQ của 1 người được cho là tuân theo phân bố chuẩn, bới gtri trung bình là 100, độ lệch chuẩn là 15.
# Một người được coi là bình thường nếu có IQ
pnorm(115, 100, 15) - pnorm(85,100, 15)
diff(pnorm(c(85, 115), 100, 15))
# readxl Nhập dữ liệu từ file excel
library(readxl)
install.packages(readxl)
install.packages("readxl")
# readxl Nhập dữ liệu từ file excel
library(readxl)
pwd
ls
getwd()
A <- read_excel("~/Documents/bb5.xlsx")
View(A)
# 1. Nhập vào R hai vectơ sau:
#   X = (1 2 3 4 5 6 7 8 9);
#   Y = (1.5 2.3 3.2 4.6 5.4 6.6 7.6 8.6 9.1).
#   a) Tính độ dài hai vectơ.
# b) Trích phần tử thứ 2 trong vectơ X và trích các phần tử thứ 1, 4, 7 trong vectơ
# Y.
# c) Thay giá trị của phần tử thứ 4 trong X bởi 215. Thay các giá trị của các phần tử
# thứ 1, 5 trong Y bởi 99, 199.
# d) Làm tròn giá trị các phần tử của Y.
# e) Tính tổng X + Y; tích của 5 và Y.
X <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# 1. Nhập vào R hai vectơ sau:
#   X = (1 2 3 4 5 6 7 8 9);
#   Y = (1.5 2.3 3.2 4.6 5.4 6.6 7.6 8.6 9.1).
#   a) Tính độ dài hai vectơ.
# b) Trích phần tử thứ 2 trong vectơ X và trích các phần tử thứ 1, 4, 7 trong vectơ
# Y.
# c) Thay giá trị của phần tử thứ 4 trong X bởi 215. Thay các giá trị của các phần tử
# thứ 1, 5 trong Y bởi 99, 199.
# d) Làm tròn giá trị các phần tử của Y.
# e) Tính tổng X + Y; tích của 5 và Y.
X <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
Y <- c(1.5, 2.3, 3.2, 4.6, 5.4, 6.6, 7.6, 8.6, 9.1)
#a) Tính độ dài hai vectơ.
X.length
#a) Tính độ dài hai vectơ.
length(X)
length(Y)
# b) Trích phần tử thứ 2 trong vectơ X và trích các phần tử thứ 1, 4, 7 trong vectơ
# Y.
X[1]
# b) Trích phần tử thứ 2 trong vectơ X và trích các phần tử thứ 1, 4, 7 trong vectơ
# Y.
X[2]
Y[c(1,4,7)]
Y <- replace(Y, c(1, 5), c(99, 199))
Y
X
Y
# c) Thay giá trị của phần tử thứ 4 trong X bởi 215. Thay các giá trị của các phần tử
# thứ 1, 5 trong Y bởi 99, 199.
X[4] = 215
X
Y
X
Y
# d) Làm tròn giá trị các phần tử của Y.
round(Y)
Y
# d) Làm tròn giá trị các phần tử của Y.
Y <- round(Y)
# e) Tính tổng X + Y; tích của 5 và Y.
X + Y
5 * Y
Y
# c) Đưa ra giá trị ở hàng 2, cột 3 của ma trận A.
# d) Đưa ra ma trận D với D là ma trận cỡ 2x4 gồm các phần tử ở hàng 1 và hàng 2
# của ma trận A.
# e) Đưa ra ma trận E với E là ma trận cỡ 4x3 gồm các phần tử trừ cột 3 của ma
# trận B.
# f) Tính ma trận chuyển vị và ma trận nghịch đảo của ma trận A.
# g) Đưa ra giá trị riêng và vectơ riêng của ma trận B.
# h) Tính định thức của ma trận B.
# i) Tính tích AB.
# j) Biết Z là tích của ma trận A và ma trận nghịch đảo của B. Tìm Z.
A = matrix(c(1, 2, 1, 3, 3, 4, 5, 4, 2, 4, 3, 2, 8, 7, 5, 1), ncol=4)
View(A)
# c) Đưa ra giá trị ở hàng 2, cột 3 của ma trận A.
# d) Đưa ra ma trận D với D là ma trận cỡ 2x4 gồm các phần tử ở hàng 1 và hàng 2
# của ma trận A.
# e) Đưa ra ma trận E với E là ma trận cỡ 4x3 gồm các phần tử trừ cột 3 của ma
# trận B.
# f) Tính ma trận chuyển vị và ma trận nghịch đảo của ma trận A.
# g) Đưa ra giá trị riêng và vectơ riêng của ma trận B.
# h) Tính định thức của ma trận B.
# i) Tính tích AB.
# j) Biết Z là tích của ma trận A và ma trận nghịch đảo của B. Tìm Z.
A <- matrix(c(1, 2, 1, 3, 3, 6, 5, 4, 2, 4, 3, 2, 8, 7, 5, 1), ncol=4)
B <- matrix(c(1, 2, 3, 4, 4, 1, 5, 3, 1, 7, 8, 9, 4, 6, 3, 7), ncol=4)
C <- matrix(B, dimnames = c('X', 'Y', 'Z', 'T'))
C <- matrix(B, dimnames = ['X', 'Y', 'Z', 'T'])
C <- matrix(B, dimnames = list('X', 'Y', 'Z', 'T'))
C <- matrix(B) #, dimnames = list('X', 'Y', 'Z', 'T'))
View(C)
C <- matrix(B, ncol=4) #, dimnames = list('X', 'Y', 'Z', 'T'))
View(C)
C <- matrix(A, ncol=4, dimnames = list('X', 'Y', 'Z', 'T'))
C <- A
rownames(C) <- c('X', 'Y', 'Z', 'T')
View(C)
colSums(B)
View(B)
rowSums(B)
View(B)
# c) Đưa ra giá trị ở hàng 2, cột 3 của ma trận A.
A[2][3]
# c) Đưa ra giá trị ở hàng 2, cột 3 của ma trận A.
A[2,3]
View(A)
setwd("/Users/delus/Documents/mycodes/Classes/Multivariate Statistical Analysis/week1")
getwd
getwd()
# d) Đưa ra ma trận D với D là ma trận cỡ 2x4 gồm các phần tử ở hàng 1 và hàng 2
# của ma trận A.
D <- matrix(0, 2, 4)
D[c(1,2),] = A[c(1,2),]
View(D)
# e) Đưa ra ma trận E với E là ma trận cỡ 4x3 gồm các phần tử trừ cột 3 của ma
# trận B.
E <- matrix(0, 4, 3)
View(D)
View(B)
E <- B[, -3]
View(E)
View(B)
# f) Tính ma trận chuyển vị và ma trận nghịch đảo của ma trận A.
A_t = t(A)
A_minus1 = solve(A)
View(A_minus1)
View(A)
View(A_minus1)
# Test:
A_minus1 %*% A
# g) Đưa ra giá trị riêng và vectơ riêng của ma trận B.
B_res = eigen(B)
B_res$values # Gia tri rieng
B_res$vectors # Vecto rieng
View(B)
# h) Tính định thức của ma trận B.
det(B)
# i) Tính tích AB.
A %*% B
# j) Biết Z là tích của ma trận A và ma trận nghịch đảo của B. Tìm Z.
B_minus1 = solve(B)
Z <- A %*% B_minus1
View(Z)
Z
# b) Trích phần tử thứ 2 trong vectơ X và trích các phần tử thứ 1, 4, 7 trong vectơ
# Y.
X[2]
Y[c(1,4,7)]
# 1. Nhập vào R hai vectơ sau:
#   X = (1 2 3 4 5 6 7 8 9);
#   Y = (1.5 2.3 3.2 4.6 5.4 6.6 7.6 8.6 9.1).
#   a) Tính độ dài hai vectơ.
# b) Trích phần tử thứ 2 trong vectơ X và trích các phần tử thứ 1, 4, 7 trong vectơ
# Y.
# c) Thay giá trị của phần tử thứ 4 trong X bởi 215. Thay các giá trị của các phần tử
# thứ 1, 5 trong Y bởi 99, 199.
# d) Làm tròn giá trị các phần tử của Y.
# e) Tính tổng X + Y; tích của 5 và Y.
X <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
Y <- c(1.5, 2.3, 3.2, 4.6, 5.4, 6.6, 7.6, 8.6, 9.1)
#a) Tính độ dài hai vectơ.
length(X)
length(Y)
# b) Trích phần tử thứ 2 trong vectơ X và trích các phần tử thứ 1, 4, 7 trong vectơ
# Y.
X[2]
Y[c(1,4,7)]
# c) Thay giá trị của phần tử thứ 4 trong X bởi 215. Thay các giá trị của các phần tử
# thứ 1, 5 trong Y bởi 99, 199.
X[4] = 215
replace(Y, [1,5], [99, 199])
replace(Y, list(1,5), list(99, 199))
replace(Y, c(1,5), c(99, 199))
# d) Làm tròn giá trị các phần tử của Y.
round(Y)
# e) Tính tổng X + Y; tích của 5 và Y.
X + Y
5 * Y
# 1. Nhập vào R hai vectơ sau:
#   X = (1 2 3 4 5 6 7 8 9);
#   Y = (1.5 2.3 3.2 4.6 5.4 6.6 7.6 8.6 9.1).
X <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
Y <- c(1.5, 2.3, 3.2, 4.6, 5.4, 6.6, 7.6, 8.6, 9.1)
#a) Tính độ dài hai vectơ.
length(X)
length(Y)
# b) Trích phần tử thứ 2 trong vectơ X và trích các phần tử thứ 1, 4, 7 trong vectơ
# Y.
X[2]
Y[c(1,4,7)]
# c) Thay giá trị của phần tử thứ 4 trong X bởi 215. Thay các giá trị của các phần tử
# thứ 1, 5 trong Y bởi 99, 199.
X[4] = 215
replace(Y, c(1,5), c(99, 199))
# d) Làm tròn giá trị các phần tử của Y.
round(Y)
# e) Tính tổng X + Y; tích của 5 và Y.
X + Y
5 * Y
# 2. Nhập vào hai ma trận
A <- matrix(c(1, 2, 1, 3, 3, 6, 5, 4, 2, 4, 3, 2, 8, 7, 5, 1), ncol=4)
B <- matrix(c(1, 2, 3, 4, 4, 1, 5, 3, 1, 7, 8, 9, 4, 6, 3, 7), ncol=4)
# a) Đổi tên các hàng của ma trận A theo thứ tự lần lượt là “X”, “Y”, “Z”, “T” và
# đặt tên ma trận này là C.
C <- A
rownames(C) <- c('X', 'Y', 'Z', 'T')
View(C)
# b) Tính tổng các phần tử theo hàng và tổng các phần tử theo cột của ma trận B.
colSums(B)
rowSums(B)
# c) Đưa ra giá trị ở hàng 2, cột 3 của ma trận A.
A[2,3]
# d) Đưa ra ma trận D với D là ma trận cỡ 2x4 gồm các phần tử ở hàng 1 và hàng 2
# của ma trận A.
D <- matrix(0, 2, 4)
D[c(1,2),] = A[c(1,2),]
View(D)
# e) Đưa ra ma trận E với E là ma trận cỡ 4x3 gồm các phần tử trừ cột 3 của ma
# trận B.
E <- matrix(0, 4, 3)
E <- B[, -3]
# f) Tính ma trận chuyển vị và ma trận nghịch đảo của ma trận A.
A_t = t(A)
A_minus1 = solve(A)
# Test:
A_minus1 %*% A
# g) Đưa ra giá trị riêng và vectơ riêng của ma trận B.
B_res = eigen(B)
B_res$values # Gia tri rieng
B_res$vectors # Vecto rieng
# h) Tính định thức của ma trận B.
det(B)
# i) Tính tích AB.
A %*% B
# j) Biết Z là tích của ma trận A và ma trận nghịch đảo của B. Tìm Z.
B_minus1 = solve(B)
Z <- A %*% B_minus1
Z
