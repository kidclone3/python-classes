# c) Thay giá trị của phần tử thứ 4 trong X bởi 215. Thay các giá trị của các phần tử
# thứ 1, 5 trong Y bởi 99, 199.
# d) Làm tròn giá trị các phần tử của Y.
# e) Tính tổng X + Y; tích của 5 và Y.
X <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# 1. Nhập vào R hai vectơ sau:
#   X = (1 2 3 4 5 6 7 8 9);
#   Y = (1.5 2.3 3.2 4.6 5.4 6.6 7.6 8.6 9.1).
#   a) Tính độ dài hai vectơ.
# b) Trích phần tử thứ 2 trong vectơ X và trích các phần tử thứ 1, 4, 7 trong vectơ
# Y.
# c) Thay giá trị của phần tử thứ 4 trong X bởi 215. Thay các giá trị của các phần tử
# thứ 1, 5 trong Y bởi 99, 199.
# d) Làm tròn giá trị các phần tử của Y.
# e) Tính tổng X + Y; tích của 5 và Y.
X <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
Y <- c(1.5, 2.3, 3.2, 4.6, 5.4, 6.6, 7.6, 8.6, 9.1)
#a) Tính độ dài hai vectơ.
X.length
#a) Tính độ dài hai vectơ.
length(X)
length(Y)
# b) Trích phần tử thứ 2 trong vectơ X và trích các phần tử thứ 1, 4, 7 trong vectơ
# Y.
X[1]
# b) Trích phần tử thứ 2 trong vectơ X và trích các phần tử thứ 1, 4, 7 trong vectơ
# Y.
X[2]
Y[c(1,4,7)]
Y <- replace(Y, c(1, 5), c(99, 199))
Y
X
Y
# c) Thay giá trị của phần tử thứ 4 trong X bởi 215. Thay các giá trị của các phần tử
# thứ 1, 5 trong Y bởi 99, 199.
X[4] = 215
X
Y
X
Y
# d) Làm tròn giá trị các phần tử của Y.
round(Y)
Y
# d) Làm tròn giá trị các phần tử của Y.
Y <- round(Y)
# e) Tính tổng X + Y; tích của 5 và Y.
X + Y
5 * Y
Y
# c) Đưa ra giá trị ở hàng 2, cột 3 của ma trận A.
# d) Đưa ra ma trận D với D là ma trận cỡ 2x4 gồm các phần tử ở hàng 1 và hàng 2
# của ma trận A.
# e) Đưa ra ma trận E với E là ma trận cỡ 4x3 gồm các phần tử trừ cột 3 của ma
# trận B.
# f) Tính ma trận chuyển vị và ma trận nghịch đảo của ma trận A.
# g) Đưa ra giá trị riêng và vectơ riêng của ma trận B.
# h) Tính định thức của ma trận B.
# i) Tính tích AB.
# j) Biết Z là tích của ma trận A và ma trận nghịch đảo của B. Tìm Z.
A = matrix(c(1, 2, 1, 3, 3, 4, 5, 4, 2, 4, 3, 2, 8, 7, 5, 1), ncol=4)
View(A)
# c) Đưa ra giá trị ở hàng 2, cột 3 của ma trận A.
# d) Đưa ra ma trận D với D là ma trận cỡ 2x4 gồm các phần tử ở hàng 1 và hàng 2
# của ma trận A.
# e) Đưa ra ma trận E với E là ma trận cỡ 4x3 gồm các phần tử trừ cột 3 của ma
# trận B.
# f) Tính ma trận chuyển vị và ma trận nghịch đảo của ma trận A.
# g) Đưa ra giá trị riêng và vectơ riêng của ma trận B.
# h) Tính định thức của ma trận B.
# i) Tính tích AB.
# j) Biết Z là tích của ma trận A và ma trận nghịch đảo của B. Tìm Z.
A <- matrix(c(1, 2, 1, 3, 3, 6, 5, 4, 2, 4, 3, 2, 8, 7, 5, 1), ncol=4)
B <- matrix(c(1, 2, 3, 4, 4, 1, 5, 3, 1, 7, 8, 9, 4, 6, 3, 7), ncol=4)
C <- matrix(B, dimnames = c('X', 'Y', 'Z', 'T'))
C <- matrix(B, dimnames = ['X', 'Y', 'Z', 'T'])
C <- matrix(B, dimnames = list('X', 'Y', 'Z', 'T'))
C <- matrix(B) #, dimnames = list('X', 'Y', 'Z', 'T'))
View(C)
C <- matrix(B, ncol=4) #, dimnames = list('X', 'Y', 'Z', 'T'))
View(C)
C <- matrix(A, ncol=4, dimnames = list('X', 'Y', 'Z', 'T'))
C <- A
rownames(C) <- c('X', 'Y', 'Z', 'T')
View(C)
colSums(B)
View(B)
rowSums(B)
View(B)
# c) Đưa ra giá trị ở hàng 2, cột 3 của ma trận A.
A[2][3]
# c) Đưa ra giá trị ở hàng 2, cột 3 của ma trận A.
A[2,3]
View(A)
sessionInfo()
mass
help(mass)
library(MASS)
library(MASS)
data <- Boston
View(data)
colMeans(data)
cov(data)
cor(data) # ma tran tuong quan
max(abs(cor(data))) # ma tran tuong quan
tuong_quan <- cor(data) # ma tran tuong quan
help(for)
mx <- 0
N <- length(data)
ans <- c(0,0)
for (i in 1:N) {
for (j in 1:N) {
if (i != j) {
if (abs(tuong_quan[i,j]) > mx) {
mx = abs(tuong_quan[i, j])
ans <- c(i, j)
}
}
}
}
print(colnames(data)[i], colnames(data)[j])
print(colnames(data))
colname <- colnames(data)
print(typeof(colname))
colname <- as.vector(colnames(data))
print(typeof(colname))
print(typeof(colname[1]))
print(colname[1])
print(colname[ans[0]], colname[ans[1]])
ans[0]
ans[1]
print(colname[ans[1]], colname[ans[2]])
ans[1]
ans[2]
colname[1]
colname[ans[1]]
print(colname[ans[1]] + " " + colname[ans[2]])
help(paste)
print(paste(c(colname[ans[1]], colname[ans[2]])))
# b. Tìm giá trị riêng và vecto riêng của ma trận tương quan mẫu.
eigen(tuong_quan)
# b. Tìm giá trị riêng và vecto riêng của ma trận tương quan mẫu.
eigen(tuong_quan)$value
help(eigen)
eigen(tuong_quan)$vector
# c. Kiểm định xem từng biến có tuân theo phân phối chuẩn một chiều
# không?
check_c <- apply(data, MARGIN=1, function(x) {
print(shapiro.test(x)$p_value > 0.05)
})
# c. Kiểm định xem từng biến có tuân theo phân phối chuẩn một chiều
# không?
check_c <- apply(data, MARGIN=2, function(x) {
print(shapiro.test(x)$p_value > 0.05)
})
# c. Kiểm định xem từng biến có tuân theo phân phối chuẩn một chiều
# không?
check_c <- apply(data, MARGIN=2, function(x) {
shapiro.test(x)$p_value > 0.05
})
# c. Kiểm định xem từng biến có tuân theo phân phối chuẩn một chiều
# không?
check_c <- apply(data, MARGIN=2, function(x) {
print(colnames(x))
})
# c. Kiểm định xem từng biến có tuân theo phân phối chuẩn một chiều
# không?
check_c <- apply(data, MARGIN=2, function(x) {
shapiro.test(data[[x]])
})
# c. Kiểm định xem từng biến có tuân theo phân phối chuẩn một chiều
# không?
check_c <- sapply(colname, function(x) {
shapiro.test(data[[x]])
})
View(check_c)
# c. Kiểm định xem từng biến có tuân theo phân phối chuẩn một chiều
# không?
check_c <- sapply(colname, function(x) {
shapiro.test(data[[x]])
})
help("mahalanobis")
# d. “Khoảng cách” có tuân theo phân phối Khi-bình phương không?
mahalanobis(data, colMeans(data), cov(data))
# d. “Khoảng cách” có tuân theo phân phối Khi-bình phương không?
maha <- mahalanobis(data, colMeans(data), cov(data))
chisq.test(maha)
View(check_c)
install.packages("KernSmooth")
library(KernSmooth)
help("bkde2D")
do_thi <- bkde2D(data, bandwidth = sapply(data, dpik))
do_thi <- bkde2D(data[,1:2], bandwidth = sapply(data, dpik))
do_thi <- bkde2D(data[,1:2], bandwidth = apply(data, dpik))
do_thi <- bkde2D(data[,1:2], bandwidth = sapply(data[,1:2], dpik))
View(do_thi)
plot(data, xlab=colname[1], ylab=colname[2])
plot(data, xlab=string(colname[1]), ylab=string(colname[2]))
plot(data)
do_thi <- bkde2D(data[,1:2], bandwidth = sapply(data[,1:2], dpik))
plot(data)
do_thi <- bkde2D(data[,1:2], bandwidth =c(data[,1], data[,2]))
View(data)
do_thi <- bkde2D(data, bandwidth =c(data$rm, data$dis))
plot(data)
plot(do_thi, xlab="RM", ylab = "DIS")
help(dpik)
do_thi <- bkde2D(data, bandwidth =c(dpik(data$rm), dpik(data$dis)))
plot(data, xlab="RM", ylab = "DIS")
View(do_thi)
plot(dothi[,1:2], xlab="RM", ylab = "DIS")
plot(do_thi[,1:2], xlab="RM", ylab = "DIS")
plot(do_thi[1:2], xlab="RM", ylab = "DIS")
do_thi[1]
plot(x=do_thi[1], y=do_thi[2], xlab="RM", ylab = "DIS")
type(do_thi)
typeof(do_thi)
typeof(do_thi[1])
typeof(do_thi[1][1])
typeof(do_thi[1][1][1])
plot(x=do_thi$x1, y=do_thi$x2, xlab="RM", ylab = "DIS")
do_thi <- bkde2D(data, bandwidth =c(dpik(data$rm), dpik(data$dis)))
plot(x=do_thi$x1, y=do_thi$x2, xlab="RM", ylab = "DIS")
plot(data, xlab="RM", ylab = "DIS")
plot(data, xlab = "RM", ylab = "DIS")
plot(data)
plot(data)
contour(x=do_thi$x1, y=do_thi$x2, z = do_thi$fhat, xlab = "rm", ylab = "dis", zlab = "density")
contour(x=do_thi$x1, y=do_thi$x2, z = do_thi$fhat, add=T)
x <- data[,c("rm", "dis")]
do_thi <- bkde2D(x, bandwidth =c(dpik(data$rm), dpik(data$dis)))
plot(x, xlab = "RM", ylab = "DIS")
plot(x)
contour(x=do_thi$x1, y=do_thi$x2, z = do_thi$fhat, add=T)
# g. Vẽ biểu đồ thể hiện rõ hàm mật độ hai chiều của hai biến rm và dis.
persp(x)
# g. Vẽ biểu đồ thể hiện rõ hàm mật độ hai chiều của hai biến rm và dis.
persp(x = do_thi$x1, y = do_thi$x2, z = do_thi$fhat, xlab="rm", ylab="dis", zlab="density")
help(persp)
rotate
install.packages("rotate")
install.packages("rotate.cloud")
# d. “Khoảng cách” có tuân theo phân phối Khi-bình phương không?
maha <- mahalanobis(data, colMeans(data), cov(data))
chisq.test(maha)
install.packages("cloud")
install.packages("TeachingDemos")
# g. Vẽ biểu đồ thể hiện rõ hàm mật độ hai chiều của hai biến rm và dis.
rotate.persp(x = do_thi$x1, y = do_thi$x2, z = do_thi$fhat, xlab="rm", ylab="dis", zlab="density")
library("TeachingDemos")
# g. Vẽ biểu đồ thể hiện rõ hàm mật độ hai chiều của hai biến rm và dis.
rotate.persp(x = do_thi$x1, y = do_thi$x2, z = do_thi$fhat, xlab="rm", ylab="dis", zlab="density")
# g. Vẽ biểu đồ thể hiện rõ hàm mật độ hai chiều của hai biến rm và dis.
rotate.persp(x = do_thi$x1, y = do_thi$x2, z = do_thi$fhat) #, xlab="rm", ylab="dis", zlab="density")
install.packages(tcltk)
install.packages("tcltk")
library("tcltk")
install.packages("XQuartz")
# g. Vẽ biểu đồ thể hiện rõ hàm mật độ hai chiều của hai biến rm và dis.
rotate.persp(x = do_thi$x1, y = do_thi$x2, z = do_thi$fhat , xlab="rm", ylab="dis", zlab="density")
# g. Vẽ biểu đồ thể hiện rõ hàm mật độ hai chiều của hai biến rm và dis.
persp(x = do_thi$x1, y = do_thi$x2, z = do_thi$fhat , xlab="rm", ylab="dis", zlab="density")
exit
Sys.which("pdflatex")
Sys.which("pdflatex")
Sys.which("xelatex")
Sys.which("lualatex")
tinytex::install_tinytex()
par(mfrow=c(1,3))
n^2
stratum_1 = c(97, 67, 42, 125, 25, 92, 105, 86, 27, 43, 45, 59, 53, 21)
stratum_2 = c(125, 155, 67, 96, 256, 47, 310, 236, 220, 352, 142, 190)
stratum_3 = c(142, 310, 495, 320, 196, 256, 440, 510, 396)
stratum_4 = c(167, 655, 220, 540, 780)
N = c(86, 72, 52, 30)
n = c(14, 12, 9, 5)
x_bar = c(mean(stratum_1), mean(stratum_2), mean(stratum_3), mean(stratum_4))
x_bar
s = c(var(stratum_1)^2, var(stratum_2)^2, var(stratum_3)^2, var(stratum_4)^2)
s
n^2
n^2*(1-n/N)*s/n
1-n/N
n/N
var_tau = sum(n^2*(1-n/N)*s^2/n)
N
n
N
n
A
knitr::opts_chunk$set(echo = TRUE)
m_i = c(3,7,11,9,2,12,14,3,5,9,8,6,3,2,1,4,12,6,5,8)
sum_i = c(50,110,230,140,60,280,240,45,60,230,140,130,70,50,10,60,280,150,110,120)
y_i = sum_i / m_i
y_i
s2
s2 = var(y_i)
s2
m = sum(m_i)
ey = sum(y_i)/m
M = sum(m_i)
y_i
ey = sum(y_i)/m
ey
eM = M/N
# Phương sai ước tính của tổng thể
var_y = (1-n/N)*s2/(n*eM^2)
var_y
eM = M/N # Kích thước trung bình của 1 nhóm.
eM
M = sum(m_i) # lực lượng của quần thể
M
eM = M/N # Kích thước trung bình của 1 nhóm.
eM
n = 20 # Kích cỡ mẫu
N = 96 # Tổng cỡ mẫu
M = sum(m_i) # lực lượng của quần thể
eM = M/N # Kích thước trung bình của 1 nhóm.
eM
# Lực lượng của từng cluster (số lượng cưa trên mỗi cụm)
m_i = c(3,7,11,9,2,12,14,3,5,9,8,6,3,2,1,4,12,6,5,8)
# Tổng số tiền phải trả cho mỗi cluster
sum_i = c(50,110,230,140,60,280,240,45,60,230,140,130,70,50,10,60,280,150,110,120)
n = 20 # Kích cỡ mẫu
N = 96 # Tổng cỡ mẫu
M = sum(m_i) # lực lượng của quần thể
eM = M/N # Kích thước trung bình của 1 nhóm.
eM
y_i = sum_i / m_i # giá trị trung bình của từng cluster
y_i
s2 = var(y_i) # Phương sai của nhóm.
s2
ey = sum(y_i)/m # Giá trị trung bình của nhóm.
ey
# Phương sai ước tính của tổng thể
var_y = (1-n/N)*s2/(n*eM^2)
var_y
bound = 2*sqrt(var_y)
ey = sum(y_i)/m # Giá trị trung bình của nhóm.
ey = sum(y_i)/M # Giá trị trung bình của nhóm.
ey
ey-bound
ey+bound
to = M*ey
var_to
# Ước lượng phương sai của tổng giá trị quần thể
var_to = N^2 *(1-n/N)*s2/n
var_to
# Ước lượng của tổng giá trị quần thể
to = M*ey
to
bound= 2*sqrt(var_to)
bound
# Tổng số tiền phải trả cho mỗi cluster
y_i = c(50,110,230,140,60,280,240,45,60,230,140,130,70,50,10,60,280,150,110,120)
n = 20 # Kích cỡ mẫu
N = 96 # Tổng cỡ mẫu
M = sum(m_i) # lực lượng của quần thể
eM = M/N # Kích thước trung bình của 1 nhóm.
# Phương sai của nhóm.
s2 = var(y_i)
s2
ey = sum(y_i)/M # Giá trị trung bình của nhóm.
ey
# Phương sai ước tính của tổng thể
var_y = (1-n/N)*s2/(n*eM^2)
var_y
bound = 2*sqrt(var_y)
bound # Sai số của ước lượng
ey-bound
ey+bound
ey-bound
bound = 2*sqrt(var_y)
bound # Sai số của ước lượng
ey
employees = c(51,62,49,73,101,48,65,49,73,61,58,52,65,49,55)
employees = c(51,62,49,73,101,48,65,49,73,61,58,52,65,49,55)
new_policy = c(42,53,40,45,63,31,38,30,54,45,51,29,46,37,42)
n = length(employees)
m_i = c(51,62,49,73,101,48,65,49,73,61,58,52,65,49,55)
a_i = c(42,53,40,45,63,31,38,30,54,45,51,29,46,37,42)
m_i = c(51,62,49,73,101,48,65,49,73,61,58,52,65,49,55)
a_i = c(42,53,40,45,63,31,38,30,54,45,51,29,46,37,42)
n = length(a_i)
p_mu = sum(a_i)/sum(m_i)
e_m = mean(m_i)
S2_p = sum((a_i-m_i*p_mu)^2)/(n-1)
N = 87
B = 2*sqrt((1-n/N)*S2_p/(n*e_m))
B = (1-n/N)*S2_p/(n*e_m)
B = 2*sqrt((1-n/N)*S2_p/(n*e_m))
e_m - B
e_m + B
D = B^2*e_m^2/4
n0 = N*S2_p / (N*D + S2_p)
D = (B^2*e_m^2)/4
n0 = (N*S2_p) / (N*D + S2_p)
B = 0.08
D = (B^2*e_m^2)/4
n0 = (N*S2_p) / (N*D + S2_p)
n0
y_mu = sum(y_i)/sum(m_i)
n = 20
N = 60
m_i = c(55,60,63,58,71,78,69,58,52,71,73,64,69,58,63,75,78,51,67,70)
y_i = c(2210,2390,2430,2380,2760,3110,2780,2370,1990,2810, 2930,2470,2830,2370,2390,2870,3210,2430,2730,2880)
y_mu = sum(y_i)/sum(m_i)
n = 20
N = 60
m_i = c(55,60,63,58,71,78,69,58,52,71,73,64,69,58,63,75,78,51,67,70)
y_i = c(2210,2390,2430,2380,2760,3110,2780,2370,1990,2810, 2930,2470,2830,2370,2390,2870,3210,2430,2730,2880)
y_mu = sum(y_i)/sum(m_i)
e_m = mean(m_i)
s2_p = sum((y_i-m_i*y_mu)^2)/(n-1)
var_y = (1-n/N) * s2_p/(n*e_m)
m_i = c(51,62,49,73,101,48,65,49,73,61,58,52,65,49,55)
a_i = c(42,53,40,45,63,31,38,30,54,45,51,29,46,37,42)
n = length(a_i)
N = 87
p_mu = sum(a_i)/sum(m_i)
e_m = mean(m_i)
S2_p = sum((a_i-m_i*p_mu)^2)/(n-1)
B = 2*sqrt((1-n/N)*S2_p/(n*e_m^2))
e_m - B
e_m + B
n = 20
N = 60
m_i = c(55,60,63,58,71,78,69,58,52,71,73,64,69,58,63,75,78,51,67,70)
y_i = c(2210,2390,2430,2380,2760,3110,2780,2370,1990,2810, 2930,2470,2830,2370,2390,2870,3210,2430,2730,2880)
y_mu = sum(y_i)/sum(m_i)
e_m = mean(m_i)
s2_p = sum((y_i-m_i*y_mu)^2)/(n-1)
var_y = (1-n/N) * s2_p/(n*e_m)
B = 2*sqrt(var_y)
var_y = (1-n/N) * s2_p/(n*e_m^2)
B = 2*sqrt(var_y)
to_muy = N*sum(y_i)/n
y_to = sum(y_i)/n
var_to = sum(m_i)*var_y
B = 2*sqrt(var_to)
setwd("~/Documents/mycodes/Classes/Sampling Methods/practice_final")
setwd("~/Documents/mycodes/Classes/Sampling Methods/practice_final")
knitr::opts_chunk$set(echo = TRUE)
sum(m_i)
sum(x_i)
x_i = c(1590, 1510, 1490, 1610, 800, 1720, 1310, 1427, 1290, 860, 1620, 710, 1140, 1980, 1990, 1420, 900, 1080, 2010, 1740, 1750, 890, 1470, 910, 1740)
sum(x_i)
sum(sapply(1:25, function(x) {
(x_i[i]-x_bar*m_i[i])^2
}))/(25-1)
sum(sapply(1:25, function(i) {
(x_i[i]-x_bar*m_i[i])^2
}))/(25-1)
x_bar = sum(x_i)/sum(m_i)
sum(sapply(1:25, function(i) {
(x_i[i]-x_bar*m_i[i])^2
}))/(25-1)
top = sum(sapply(1:25, function(i) {
(x_i[i]-x_bar*m_i[i])^2
}))
top
top = sum(sapply(0:25, function(i) {
(x_i[i]-x_bar*m_i[i])^2
}))
top = sum(sapply(0:25, function(i) {
(x_i[i]-x_bar*m_i[i])^2
}))
top = sum(sapply(0:24, function(i) {
(x_i[i]-x_bar*m_i[i])^2
}))
m_i = c(31, 29, 25, 35, 15, 31, 22, 27, 25, 19, 30, 18, 21, 40, 38, 28, 17, 22, 41, 32, 35, 19, 29, 18, 31)
x_i = c(1590, 1510, 1490, 1610, 800, 1720, 1310, 1427, 1290, 860, 1620, 710, 1140, 1980, 1990, 1420, 900, 1080, 2010, 1740, 1750, 890, 1470, 910, 1740)
x_bar = sum(x_i)/sum(m_i)
top = sum(sapply(0:24, function(i) {
(x_i[i]-x_bar*m_i[i])^2
}))
top = sum(sapply(0:24, function(i) {
tmp = (x_i[i]-x_bar*m_i[i])^2
print(tmp)
}))
top = sum(sapply(1:25, function(i) {
tmp = (x_i[i]-x_bar*m_i[i])^2
print(tmp)
}))
top
top = sum(sapply(1:25, function(i) {
tmp = (x_i[i]-x_bar*m_i[i])^2
print(tmp)
}))
top
top/(25-1)
top
top/(25-1)
m_i = c(51, 62, 49, 73, 101, 48, 65, 49, 73, 61, 58, 52, 65, 49, 55)
p_i = c(42, 53, 40, 45, 63, 31, 38, 30, 54, 45, 51, 29, 46, 37, 42)
a_i = c(42, 53, 40, 45, 63, 31, 38, 30, 54, 45, 51, 29, 46, 37, 42)
p_hat = sum(a_i)/sum(m_i)
p_hat
p_hat = sum(a_i)/sum(m_i)
p_hat
m_i = c(51, 62, 49, 73, 101, 48, 65, 49, 73, 61, 58, 52, 65, 49, 55)
a_i = c(42, 53, 40, 45, 63, 31, 38, 30, 54, 45, 51, 29, 46, 37, 42)
p_hat = sum(a_i)/sum(m_i)
p_hat
sum(m_i)
n = length(m_i)
sum(sapply(1:15, function(i) {
(a_i[i]-p_hat*m_i[i])^2
}))/(n-1)
m_i = c(31, 29, 25, 35, 15, 31, 22, 27, 25, 19, 30, 18, 21, 40, 38, 28, 17, 22, 41, 32, 35, 19, 29, 18, 31)
sum(m_i)
len(m_i)
length(m_i)
